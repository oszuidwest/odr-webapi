name: Build and Release ODR Web API
on:
  workflow_dispatch:

# Following the principle of least privilege
permissions: {}

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract version
        id: get-version
        shell: bash
        run: |
          VERSION=$(grep -o 'AppVersion = "[0-9]\+\.[0-9]\+\.[0-9]\+"' main.go | head -n 1 | sed 's/AppVersion = "\(.*\)"/\1/')
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
  
  build:
    name: Build ODR Web API
    needs: extract-version
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        include:
          - os: linux
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: linux
            arch: arm64
            runner: "ubuntu-24.04-arm"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          cache: false
      - name: Initialize Go module if needed
        run: |
          if [ ! -f go.mod ]; then
            go mod init github.com/${{ github.repository }}
          fi
          
      - name: Download dependencies
        run: |
          go get github.com/oszuidwest/odr-webapi
          go mod tidy
          
      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -v -o odr-webapi-${{ matrix.os }}-${{ matrix.arch }}
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-webapi-${{ matrix.os }}-${{ matrix.arch }}
          path: odr-webapi-${{ matrix.os }}-${{ matrix.arch }}
          
  release:
    name: Create GitHub Release
    needs: [build, extract-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts
          
      - name: Organize artifacts
        run: |
          mkdir -p release_files
          mv all_artifacts/*/* release_files/
          ls -la release_files/
          
      - name: Create tag if it doesn't exist
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          TAG_NAME="v${VERSION}"
          if git rev-parse $TAG_NAME >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists."
          else
            echo "Creating tag $TAG_NAME."
            git tag $TAG_NAME
            git push origin $TAG_NAME
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          tag_name: v${{ needs.extract-version.outputs.version }}
          name: "ODR Web API v${{ needs.extract-version.outputs.version }}"
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
